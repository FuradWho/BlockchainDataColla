// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: msg.proto

// 指定等会文件生成出来的package

package msg

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MsgService service

func NewMsgServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MsgService service

type MsgService interface {
	// 定义方法
	SaveMsgRpc(ctx context.Context, in *SaveMsgRequest, opts ...client.CallOption) (*SaveMsgResponse, error)
}

type msgService struct {
	c    client.Client
	name string
}

func NewMsgService(name string, c client.Client) MsgService {
	return &msgService{
		c:    c,
		name: name,
	}
}

func (c *msgService) SaveMsgRpc(ctx context.Context, in *SaveMsgRequest, opts ...client.CallOption) (*SaveMsgResponse, error) {
	req := c.c.NewRequest(c.name, "MsgService.SaveMsgRpc", in)
	out := new(SaveMsgResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MsgService service

type MsgServiceHandler interface {
	// 定义方法
	SaveMsgRpc(context.Context, *SaveMsgRequest, *SaveMsgResponse) error
}

func RegisterMsgServiceHandler(s server.Server, hdlr MsgServiceHandler, opts ...server.HandlerOption) error {
	type msgService interface {
		SaveMsgRpc(ctx context.Context, in *SaveMsgRequest, out *SaveMsgResponse) error
	}
	type MsgService struct {
		msgService
	}
	h := &msgServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MsgService{h}, opts...))
}

type msgServiceHandler struct {
	MsgServiceHandler
}

func (h *msgServiceHandler) SaveMsgRpc(ctx context.Context, in *SaveMsgRequest, out *SaveMsgResponse) error {
	return h.MsgServiceHandler.SaveMsgRpc(ctx, in, out)
}



